{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nlmsc\\\\Documents\\\\React\\\\emma\\\\src\\\\components\\\\navbar\\\\controls\\\\LanguageControl.js\",\n    _s2 = $RefreshSig$();\n\nimport \"../Navbar.css\";\nimport DictionaryProps from \"../../../data/constants/DictionaryProps\";\nimport LocalStorageProps from \"../../../data/constants/LocalStorageProps\";\nimport React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ReactComponent as Language } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../icons/Language.svg\";\nimport Paths from \"../../../data/constants/Paths\";\nimport CSSProps from \"../../../data/constants/CSSProps\";\nimport AppSettings from \"../../../data/AppSettings\";\nimport { Validator } from \"../../../Tools/Validator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LanguageControl = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let selectedLanguage = localStorage.getItem(LocalStorageProps.Language);\n\n  if (Validator.prototype.isEmpty(selectedLanguage) === true) {\n    selectedLanguage = AppSettings.EN;\n  }\n\n  useEffect(_s(() => {\n    _s();\n\n    const [t, i18n] = useTranslation(AppSettings.TranslationFilename);\n    CacheLanguage(selectedLanguage);\n    i18n.changeLanguage(selectedLanguage);\n  }, \"4gi9wXtdE+JncrMt78YHghJPC7E=\", false, function () {\n    return [useTranslation];\n  }), [selectedLanguage]);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: CSSProps.NavBar.Item + CSSProps.NavBar.hasDropdown,\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      className: CSSProps.NavBar.Link,\n      href: Paths.None,\n      children: [/*#__PURE__*/_jsxDEV(Language, {\n        className: CSSProps.NavBar.Icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: CSSProps.NavBar.Text,\n        children: t(DictionaryProps.Language)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: CSSProps.NavBar.Dropdown,\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        id: AppSettings.NL,\n        className: CSSProps.NavBar.DropdownItem,\n        onClick: () => {\n          i18n.changeLanguage(AppSettings.NL);\n          CacheLanguage(AppSettings.NL);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: Paths.None,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: CSSProps.NavBar.DropdownText,\n            children: \"Nederlands\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        id: AppSettings.EN,\n        className: CSSProps.NavBar.DropdownItem,\n        onClick: () => {\n          i18n.changeLanguage(AppSettings.EN);\n          CacheLanguage(AppSettings.EN);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: Paths.None,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: CSSProps.NavBar.DropdownText,\n            children: \"English\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(LanguageControl, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = LanguageControl;\n\nfunction CacheLanguage(language) {\n  let selectedLanguage = localStorage.getItem(LocalStorageProps.Language);\n\n  if (Validator.prototype.isEmpty(selectedLanguage) === false) {\n    const selectedButton = document.getElementById(selectedLanguage);\n    selectedButton.style.cssText = CSSProps.Style.None;\n  }\n\n  const newSelectedButton = document.getElementById(language);\n  newSelectedButton.style.cssText = CSSProps.Style.ItemSelected;\n  localStorage.removeItem(LocalStorageProps.Language);\n  localStorage.setItem(LocalStorageProps.Language, language);\n}\n\n_c2 = CacheLanguage;\nexport default LanguageControl;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LanguageControl\");\n$RefreshReg$(_c2, \"CacheLanguage\");","map":{"version":3,"sources":["C:/Users/nlmsc/Documents/React/emma/src/components/navbar/controls/LanguageControl.js"],"names":["DictionaryProps","LocalStorageProps","React","useEffect","useTranslation","Paths","CSSProps","AppSettings","Validator","LanguageControl","selectedLanguage","localStorage","getItem","Language","prototype","isEmpty","EN","t","i18n","TranslationFilename","CacheLanguage","changeLanguage","NavBar","Item","hasDropdown","Link","None","Icon","Text","Dropdown","NL","DropdownItem","DropdownText","language","selectedButton","document","getElementById","style","cssText","Style","newSelectedButton","ItemSelected","removeItem","setItem"],"mappings":"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","sourcesContent":["import \"../Navbar.css\";\r\nimport DictionaryProps from \"../../../data/constants/DictionaryProps\";\r\nimport LocalStorageProps from \"../../../data/constants/LocalStorageProps\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ReactComponent as Language } from \"../../../icons/Language.svg\";\r\nimport Paths from \"../../../data/constants/Paths\";\r\nimport CSSProps from \"../../../data/constants/CSSProps\";\r\nimport AppSettings from \"../../../data/AppSettings\";\r\nimport { Validator } from \"../../../Tools/Validator\";\r\n\r\nconst LanguageControl = () => {\r\n  \r\n  let selectedLanguage = localStorage.getItem(LocalStorageProps.Language);\r\n\r\n  if (Validator.prototype.isEmpty(selectedLanguage) === true) {\r\n    selectedLanguage = AppSettings.EN;\r\n  }\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const [t, i18n] = useTranslation(AppSettings.TranslationFilename);\r\n    CacheLanguage(selectedLanguage);\r\n    i18n.changeLanguage(selectedLanguage);\r\n  },[selectedLanguage]);\r\n  return (\r\n    <li className={CSSProps.NavBar.Item + CSSProps.NavBar.hasDropdown}>\r\n      <a className={CSSProps.NavBar.Link} href={Paths.None}>\r\n        <Language className={CSSProps.NavBar.Icon} />\r\n        <span className={CSSProps.NavBar.Text}>\r\n          {t(DictionaryProps.Language)}\r\n        </span>\r\n      </a>\r\n      <ul className={CSSProps.NavBar.Dropdown}>\r\n        <li\r\n          id={AppSettings.NL}\r\n          className={CSSProps.NavBar.DropdownItem}\r\n          onClick={() => {\r\n            i18n.changeLanguage(AppSettings.NL);\r\n            CacheLanguage(AppSettings.NL);\r\n          }}\r\n        >\r\n          <a href={Paths.None}>\r\n            <span className={CSSProps.NavBar.DropdownText}>Nederlands</span>\r\n          </a>\r\n        </li>\r\n        <li\r\n          id={AppSettings.EN}\r\n          className={CSSProps.NavBar.DropdownItem}\r\n          onClick={() => {\r\n            i18n.changeLanguage(AppSettings.EN);\r\n            CacheLanguage(AppSettings.EN);\r\n          }}\r\n        >\r\n          <a href={Paths.None}>\r\n            <span className={CSSProps.NavBar.DropdownText}>English</span>\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  );\r\n};\r\n\r\nfunction CacheLanguage(language) {\r\n  let selectedLanguage = localStorage.getItem(LocalStorageProps.Language);\r\n\r\n  if (Validator.prototype.isEmpty(selectedLanguage) === false) {\r\n    const selectedButton = document.getElementById(selectedLanguage);\r\n    selectedButton.style.cssText = CSSProps.Style.None;\r\n  }\r\n\r\n  const newSelectedButton = document.getElementById(language);\r\n  newSelectedButton.style.cssText = CSSProps.Style.ItemSelected;\r\n\r\n  localStorage.removeItem(LocalStorageProps.Language);\r\n  localStorage.setItem(LocalStorageProps.Language, language);\r\n}\r\nexport default LanguageControl;\r\n"]},"metadata":{},"sourceType":"module"}